import * as asn1js from './pkijs/asn1.js';
import Certificate from './pkijs/Certificate.js';

// const myDER = new Uint8Array([48, 130, 7, 24, 48, 130, 6, 0, 160, 3, 2, 1, 2, 2, 16, 1, 242, 2, 3, 29, 253, 169, 142, 253, 255, 15, 114, 190, 81, 6, 13, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 77, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 21, 48, 19, 6, 3, 85, 4, 10, 19, 12, 68, 105, 103, 105, 67, 101, 114, 116, 32, 73, 110, 99, 49, 39, 48, 37, 6, 3, 85, 4, 3, 19, 30, 68, 105, 103, 105, 67, 101, 114, 116, 32, 83, 72, 65, 50, 32, 83, 101, 99, 117, 114, 101, 32, 83, 101, 114, 118, 101, 114, 32, 67, 65, 48, 30, 23, 13, 49, 55, 48, 51, 49, 56, 48, 48, 48, 48, 48, 48, 90, 23, 13, 50, 48, 48, 51, 50, 53, 49, 50, 48, 48, 48, 48, 90, 48, 103, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 19, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 21, 48, 19, 6, 3, 85, 4, 7, 19, 12, 87, 97, 108, 110, 117, 116, 32, 67, 114, 101, 101, 107, 49, 21, 48, 19, 6, 3, 85, 4, 10, 19, 12, 76, 117, 99, 97, 115, 32, 71, 97, 114, 114, 111, 110, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 42, 46, 98, 97, 100, 115, 115, 108, 46, 99, 111, 109, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 194, 4, 236, 248, 140, 238, 4, 194, 179, 216, 80, 213, 112, 88, 204, 147, 24, 235, 92, 168, 104, 73, 176, 34, 181, 249, 149, 158, 177, 43, 44, 118, 62, 108, 192, 75, 96, 76, 76, 234, 178, 180, 192, 15, 128, 182, 176, 249, 114, 201, 134, 2, 249, 92, 65, 93, 19, 43, 127, 113, 196, 75, 188, 233, 148, 46, 80, 55, 166, 103, 28, 97, 140, 246, 65, 66, 197, 70, 211, 22, 135, 39, 159, 116, 235, 10, 157, 17, 82, 38, 33, 115, 108, 132, 76, 121, 85, 228, 209, 107, 232, 6, 61, 72, 21, 82, 173, 179, 40, 219, 170, 255, 110, 255, 96, 149, 74, 119, 107, 57, 241, 36, 209, 49, 182, 221, 77, 192, 196, 252, 83, 185, 109, 66, 173, 181, 124, 254, 174, 245, 21, 210, 51, 72, 231, 34, 113, 199, 194, 20, 122, 108, 40, 234, 55, 74, 223, 234, 108, 181, 114, 180, 126, 90, 162, 22, 220, 105, 177, 87, 68, 219, 10, 18, 171, 222, 195, 15, 71, 116, 92, 65, 34, 225, 154, 249, 27, 147, 230, 173, 34, 6, 41, 46, 177, 186, 73, 28, 12, 39, 158, 163, 251, 139, 247, 64, 114, 0, 172, 146, 8, 217, 140, 87, 132, 83, 129, 5, 203, 230, 254, 107, 84, 152, 64, 39, 133, 199, 16, 187, 115, 112, 239, 105, 24, 65, 7, 69, 85, 124, 249, 100, 63, 61, 44, 195, 169, 124, 235, 147, 26, 76, 134, 209, 202, 133, 2, 3, 1, 0, 1, 163, 130, 3, 216, 48, 130, 3, 212, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 15, 128, 97, 28, 130, 49, 97, 213, 47, 40, 231, 141, 70, 56, 180, 44, 225, 198, 217, 226, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 157, 238, 193, 123, 129, 11, 58, 71, 105, 113, 24, 125, 17, 55, 147, 188, 165, 27, 63, 251, 48, 35, 6, 3, 85, 29, 17, 4, 28, 48, 26, 130, 12, 42, 46, 98, 97, 100, 115, 115, 108, 46, 99, 111, 109, 130, 10, 98, 97, 100, 115, 115, 108, 46, 99, 111, 109, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 5, 160, 48, 29, 6, 3, 85, 29, 37, 4, 22, 48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 107, 6, 3, 85, 29, 31, 4, 100, 48, 98, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 51, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 115, 115, 99, 97, 45, 115, 104, 97, 50, 45, 103, 53, 46, 99, 114, 108, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 52, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 115, 115, 99, 97, 45, 115, 104, 97, 50, 45, 103, 53, 46, 99, 114, 108, 48, 76, 6, 3, 85, 29, 32, 4, 69, 48, 67, 48, 55, 6, 9, 96, 134, 72, 1, 134, 253, 108, 1, 1, 48, 42, 48, 40, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 28, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 67, 80, 83, 48, 8, 6, 6, 103, 129, 12, 1, 2, 3, 48, 124, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 112, 48, 110, 48, 36, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 24, 104, 116, 116, 112, 58, 47, 47, 111, 99, 115, 112, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 48, 70, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 58, 104, 116, 116, 112, 58, 47, 47, 99, 97, 99, 101, 114, 116, 115, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 68, 105, 103, 105, 67, 101, 114, 116, 83, 72, 65, 50, 83, 101, 99, 117, 114, 101, 83, 101, 114, 118, 101, 114, 67, 65, 46, 99, 114, 116, 48, 12, 6, 3, 85, 29, 19, 1, 1, 255, 4, 2, 48, 0, 48, 130, 1, 245, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 4, 2, 4, 130, 1, 229, 4, 130, 1, 225, 1, 223, 0, 118, 0, 164, 185, 9, 144, 180, 24, 88, 20, 135, 187, 19, 162, 204, 103, 112, 10, 60, 53, 152, 4, 249, 27, 223, 184, 227, 119, 205, 14, 200, 13, 220, 16, 0, 0, 1, 90, 223, 170, 65, 93, 0, 0, 4, 3, 0, 71, 48, 69, 2, 33, 0, 205, 30, 10, 168, 45, 51, 160, 63, 5, 205, 31, 9, 147, 76, 7, 220, 35, 11, 127, 248, 244, 179, 251, 12, 23, 36, 160, 230, 11, 8, 63, 122, 2, 32, 118, 146, 96, 52, 23, 184, 137, 209, 38, 173, 86, 29, 65, 200, 193, 199, 109, 236, 11, 28, 100, 1, 86, 128, 70, 130, 206, 31, 188, 249, 11, 194, 0, 118, 0, 86, 20, 6, 154, 47, 215, 194, 236, 211, 245, 225, 189, 68, 178, 62, 199, 70, 118, 185, 188, 153, 17, 92, 192, 239, 148, 152, 85, 214, 137, 208, 221, 0, 0, 1, 90, 223, 170, 66, 136, 0, 0, 4, 3, 0, 71, 48, 69, 2, 32, 79, 182, 45, 94, 132, 57, 62, 97, 220, 150, 179, 138, 163, 73, 201, 179, 246, 75, 179, 77, 106, 43, 234, 52, 24, 147, 207, 198, 100, 60, 17, 31, 2, 33, 0, 251, 219, 175, 109, 213, 170, 225, 218, 33, 222, 39, 188, 17, 226, 183, 182, 6, 116, 149, 233, 187, 177, 39, 81, 148, 80, 173, 77, 79, 210, 82, 213, 0, 117, 0, 238, 75, 189, 183, 117, 206, 96, 186, 225, 66, 105, 31, 171, 225, 158, 102, 163, 15, 126, 95, 176, 114, 216, 131, 0, 196, 123, 137, 122, 168, 253, 203, 0, 0, 1, 90, 223, 170, 68, 89, 0, 0, 4, 3, 0, 70, 48, 68, 2, 32, 84, 66, 71, 147, 54, 144, 86, 142, 238, 63, 57, 121, 241, 140, 227, 165, 163, 1, 23, 162, 205, 87, 176, 139, 106, 124, 185, 26, 143, 59, 250, 113, 2, 32, 64, 188, 203, 14, 20, 138, 191, 21, 81, 54, 175, 248, 103, 90, 223, 110, 31, 34, 17, 131, 58, 30, 62, 118, 54, 147, 189, 248, 189, 57, 235, 154, 0, 118, 0, 187, 217, 223, 188, 31, 138, 113, 181, 147, 148, 35, 151, 170, 146, 123, 71, 56, 87, 149, 10, 171, 82, 232, 26, 144, 150, 100, 54, 142, 30, 209, 133, 0, 0, 1, 90, 223, 170, 66, 22, 0, 0, 4, 3, 0, 71, 48, 69, 2, 32, 120, 106, 89, 24, 130, 52, 215, 252, 135, 120, 182, 0, 60, 44, 163, 153, 118, 216, 81, 105, 240, 126, 163, 4, 26, 126, 232, 29, 143, 104, 20, 148, 2, 33, 0, 154, 79, 47, 98, 88, 96, 104, 178, 220, 208, 105, 28, 248, 201, 20, 33, 159, 108, 18, 130, 209, 250, 211, 133, 4, 182, 173, 73, 52, 36, 212, 74, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 105, 122, 134, 93, 236, 13, 172, 88, 239, 173, 156, 37, 206, 95, 196, 209, 189, 41, 207, 208, 90, 247, 249, 99, 52, 203, 55, 18, 46, 196, 71, 211, 178, 63, 217, 130, 111, 144, 218, 17, 101, 245, 233, 216, 70, 62, 12, 213, 103, 168, 254, 204, 63, 240, 156, 61, 12, 100, 174, 202, 147, 162, 97, 112, 179, 244, 137, 49, 208, 87, 54, 143, 243, 170, 247, 127, 73, 83, 159, 168, 147, 80, 34, 144, 7, 151, 157, 174, 3, 21, 59, 112, 240, 28, 136, 114, 26, 212, 234, 214, 217, 107, 242, 104, 113, 35, 52, 89, 153, 123, 88, 138, 224, 58, 219, 240, 79, 234, 130, 200, 143, 73, 129, 128, 167, 89, 22, 207, 69, 248, 89, 174, 82, 177, 169, 10, 112, 160, 255, 190, 104, 85, 116, 28, 224, 81, 246, 120, 255, 71, 56, 172, 171, 198, 70, 159, 183, 250, 28, 165, 113, 150, 161, 210, 148, 23, 97, 110, 103, 7, 3, 249, 199, 129, 186, 112, 83, 102, 230, 162, 120, 175, 157, 219, 231, 165, 1, 200, 240, 92, 93, 224, 28, 219, 113, 22, 12, 249, 146, 36, 1, 53, 128, 231, 246, 142, 188, 127, 196, 16, 134, 250, 147, 8, 169, 105, 123, 42, 28, 183, 218, 38, 173, 82, 99, 145, 180, 247, 177, 224, 88, 117, 130, 144, 37, 3, 254, 156, 87, 234, 155, 19, 77, 171, 234, 126, 210, 222, 157, 39, 123, 166, 34, 183, 249, 252]);

// this particular prototype override makes it easy to chain down complex objects
const get = (obj, path) => {
    for (var i=0, path=path.split('.'), len=path.length; i<len; i++){
        if (Array.isArray(obj[path[i]])){
            obj = obj[path[i]][ path[i+1]];
            i++;
        } else {
            obj = obj[path[i]];
        }

    };

    return obj;
};

const getX509Ext = (extensions, v) => {
  for (var extension in extensions) {
    if (extensions[extension].extnID === v) {
      return extensions[extension].parsedValue
    }
  }
};

const getHash = async (algo, buffer) => {
  const hashBuffer = await crypto.subtle.digest(algo, buffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));

  return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join(':').toUpperCase();
};

const parseSubsidiary = (obj) => {
  var path = [];

  const subsidiary = {
    'cn': undefined,
    'c': undefined,
    'l': undefined,
    's': undefined,
    'address': undefined,
    'o': undefined,
    'ou': undefined,
  };

  const usefulOIDs = {
    '2.5.4.3': 'cn',
    '2.5.4.6': 'c',        // country
    '2.5.4.7': 'l',        // locality
    '2.5.4.8': 's',        // state or province name
    '2.5.4.9': 'address',
    '2.5.4.10': 'o',
    '2.5.4.11': 'ou',
  };

  for (var attribute in obj) {
    var attr = obj[attribute];
    // console.log('attribute is', obj[attribute]);
    if (attr.type in usefulOIDs) {
      // add it to the subsidary
      subsidiary[usefulOIDs[attr.type]] = attr.value.valueBlock.value;
      path.push(`${usefulOIDs[attr.type].toUpperCase()}=${attr.value.valueBlock.value}`);
    } else {
      // append to the path because we didn't understand something
      path.push(`??=${attr.value.valueBlock.value}`);
    }
  }

  // add the path to the subsidiary
  path.reverse();
  subsidiary['path'] = path.join(', ');

  return subsidiary;
};


export const parse = async (der) => {
  console.log('called into parse()');
  const signatureNames = {
    '1.2.840.113549.1.1.5': 'SHA-1 with RSA Encryption',
    '1.2.840.113549.1.1.11': 'SHA-256 with RSA Encryption',
    '1.2.840.113549.1.1.12': 'SHA-384 with RSA Encryption',
    '1.2.840.113549.1.1.13': 'SHA-512 with RSA Encryption',
    '1.2.840.10040.4.3': 'DSA with SHA-1',
    '2.16.840.1.101.3.4.3.2': 'DSA with SHA-256',
    '1.2.840.10045.4.1': 'ECDSA with SHA-1',
    '1.2.840.10045.4.3.2': 'ECDSA with SHA-256',
    '1.2.840.10045.4.3.3': 'ECDSA with SHA-384',
    '1.2.840.10045.4.3.4': 'ECDSA with SHA-512',
  };

  // parse the DER
  const asn1 = asn1js.fromBER(der.buffer);
  var x509 = new Certificate({ schema: asn1.result });
  x509 = x509.toJSON()

  // convert the cert to PEM
  const certBTOA = window.btoa(String.fromCharCode.apply(null, der)).match(/.{1,64}/g).join('\r\n');

  // get the subjectAltNames
  let san = getX509Ext(x509.extensions, '2.5.29.17');
  if (san !== undefined && san.hasOwnProperty('altNames')) {
    san = Object.keys(san.altNames).map(x => san.altNames[x].value);
  } else {
    san = [];
  }

  console.log('returning from parse()');

  // the output shell
  return {
    files: {
      der: undefined,
      pem: encodeURI(`-----BEGIN CERTIFICATE-----\r\n${certBTOA}\r\n-----END CERTIFICATE-----\r\n`),
    },
    fingerprint: {
      'sha1': await getHash('SHA-1', der.buffer),
      'sha256': await getHash('SHA-256', der.buffer),
    },
    issuer: parseSubsidiary(x509.issuer.typesAndValues),
    notBefore: x509.notBefore.value.toLocaleString(),
    notAfter: x509.notAfter.value.toLocaleString(),
    subject: parseSubsidiary(x509.subject.typesAndValues),
    serialNumber: get(x509, 'serialNumber.valueBlock.valueHex').match(/.{2}/g).join(':'),
    signature: {
      name: signatureNames[get(x509, 'signature.algorithmId')],
      type: get(x509, 'signature.algorithmId'),
    },
    subjectAltNames: san,
    version: x509.version.toString(),
  }




  // console.log('here is the asn1', asn1);
  // console.log('here is the cert', x509);

  // let's see if we can do this
  // console.log('serial number', get(x509, 'serialNumber.valueBlock.valueHex'));

  // console.log('here is the cert so far', cert);

};

const fml = async () => {
  return await parse(myDER);
}

// fml();
